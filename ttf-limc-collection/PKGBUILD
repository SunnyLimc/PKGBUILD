# in order to use fontforge, configparser will be automatically install
# to a user-level folder, with pipx + pipenv folder-level isolated environment
#! may a long time of building is needed, consider taking a cup of coffee üçµ
pkgbase=ttf-limc-collection
pkgname=(ttf-{windows,firacode-nf,lxgw-wenkai-screen,lxgw-cleargothic-book,sarasa-gothic})
pkgver=0.0.1
pkgrel=1
license=('custom')
pkgdesc='A font collection made by limc and aims to provide zh-* users a better experience'
url='https://github.com/SunnyLimc/PKGBUILD/tree/main/ttf-limc-collection'
arch=('any')
provides=('ttf-limc-collection')
makedepends=(
  'git'
  'unzip'
  'p7zip'
  # font-patcher.sh
  'python'
  'python-pip'
  'fontforge'
)
#! put your ttf/ttc file extract from windows DIRECTLY in
#! (without wrap by any folder) a zip archive named 'WindowsFonts.zip'
#! and put the archive the same folder as PKGBUILD
#! OR remove the line of source above
source=(
  'file://WindowsFonts.zip' #! remove this line to bypass the installation of windows fonts
  'font-patcher::https://raw.githubusercontent.com/ryanoasis/nerd-fonts/master/font-patcher'
  'FiraCodeNF.zip::https://github.com/ryanoasis/nerd-fonts/releases/download/v2.2.2/FiraCode.zip'
  'SarasaGothic.7z::https://github.com/be5invis/Sarasa-Gothic/releases/download/v0.37.4/sarasa-gothic-ttc-0.37.4.7z'
  'https://github.com/lxgw/LxgwWenKai-Screen/releases/download/v1.245/LXGWWenKaiScreen.ttf'
  'https://github.com/lxgw/LxgwWenKai-Screen/releases/download/v1.245/LXGWWenKaiScreenR.ttf'
  'https://github.com/lxgw/LxgwNewClearGothic/releases/download/v0.235/LXGWNewClearGothic-Book.ttf'
)
noextract=(
  'WindowsFonts.zip'
  'FiraCode.zip'
  'FiraCodeNF.zip'
  'SarasaGothic.7z'
)
sha256sums=(
  'SKIP'
  '388e1d04adca4be29b4f1f1888db45c3521cd96c26c41c20a1ccf992d2596479'
  '20182e6e7c42cf8ab479d83af3200266261ec9bd4e80cdaceb793ecd56c9a398'
  'd5cde19772923d07d498156762631936e54484f94e68403eb4517b4219a3288a'
  'c5abd3121a9dad6afefed47aed17ac6229444ee9b22445c17006846addc0dc2a'
  '89e5a74a677c8ad990193a90f9aee4762cf8eafe9980b6aef380291faf55b4ea'
  '6128153f595f18cf15f97b99b008d60c957712ac6fdbff6e91e64d7845741963'
)

pkgver() {
  printf "r%s" "$(git rev-list --count HEAD)"
}

prepare() {
  # fontforge
  /usr/bin/python -m pip install --user pipx
  /usr/bin/python -m pipx ensurepath
  /usr/bin/python -m pipx install pipenv
  pipenv install configparser
  # nerd-fonts library
  git -C nerd-fonts pull || git clone --sparse --depth 1 --branch master --single-branch --filter=blob:none https://github.com/ryanoasis/nerd-fonts.git nerd-fonts
  [[ -d "src/glyphs" ]] && return 0
  cd nerd-fonts
  git sparse-checkout set src/glyphs
  cd ..
  ln -srf nerd-fonts/src .
}

_prepare() {
  rm -rf "$pkgname"
  mkdir -p "$pkgname"
  rm -rf "${pkgname}"_new
  mkdir -p "${pkgname}"_new
}

_build() {
  local fonts=("$@")
  for i in "${fonts[@]}"; do
    fontforge -script font-patcher -out "${pkgname}_new" "$i"
  done
}

_pass_build() {
  local fonts=("$@")
  for i in "${fonts[@]}"; do
    mv "$i" "${pkgname}"_new/
  done
}

_package() {
  local fonts
  mapfile -t fonts < <(ls -d "${pkgname}"_new/*.ttf)
  mapfile -O ${#fonts[@]} -t fonts < <(ls -d "${pkgname}"_new/*.ttc)
  for i in "${fonts[@]}"; do
    install -Dm644 "$i" -t "$pkgdir/usr/share/fonts/TTF"
  done
}

package_ttf-windows() {
  [[ ! -f "WindowsFonts.zip" ]] && return 0
  _prepare
  unzip -q -o 'WindowsFonts.zip' -d "$pkgname"
  buildfonts=(
    msgothic.ttc            # MS Gothic
    YuGothR.ttc YuGothB.ttc # Yu Gothic
    YuGothM.ttc             # Yu Gothic Medium
    YuGothL.ttc             # Yu Gothic Light
    malgun.ttf malgunbd.ttf # Malgun Gothic
    malgunsl.ttf            # Malgun Gothic Semilight
    simsun.ttc              # NSimSun
    simsunb.ttf             # SimSun-ExtB
    msyh.ttc msyhbd.ttc     # Microsoft YaHei
    msyhl.ttc               # Microsoft YaHei Light
    msjh.ttc msjhbd.ttc     # Microsoft JhengHei
    msjhl.ttc               # Microsoft JhengHei Light
    mingliub.ttc            # MingLiU_HKSCS-ExtB
  )
  local fonts
  for i in "${buildfonts}"; do
    fonts+="${pkgname}/${i}"
  done
  _build "${fonts[@]}"
  # remove to prevent from overwriting
  for i in "${buildfonts}"; do
    rm -f "$pkgname"/$i
  done
  unset fonts

  local fonts
  mapfile -t fonts < <(ls -d "$pkgname"/*.ttf)
  mapfile -O ${#fonts[@]} -t fonts < <(ls -d "$pkgname"/*.ttc)
  _pass_build "${fonts[@]}"
  _package
}

package_ttf-firacode-nf() {
  _prepare
  unzip -q -o 'FiraCodeNF.zip' -d "$pkgname"
  local fonts
  mapfile -t fonts < <(ls -d "$pkgname"/*Mono.ttf)
  mapfile -O ${#fonts[@]} -t fonts < <(ls -d "$pkgname"/*Complete.ttf)
  _pass_build "${fonts[@]}"
  _package
  install -Dm644 "$pkgname/LICENSE" -t "$pkgdir/usr/share/licenses/$pkgname"
}

package_ttf-lxgw-wenkai-screen() {
  _prepare
  local fonts=('LXGWWenKaiScreen.ttf' 'LXGWWenKaiScreenR.ttf')
  _build "${fonts[@]}"
  _package
}

package_ttf-lxgw-cleargothic-book() {
  _prepare
  local fonts=('LXGWNewClearGothic-Book.ttf')
  _build "${fonts[@]}"
  _package
}

package_ttf-sarasa-gothic() {
  _prepare
  # disable output(bso0) and progress output(bsp0) and extract(e)
  # with overwrite-mode(aoa) to folder(o) "$pkgname"
  7z -bso0 -bsp0 -aoa -o"$pkgname" e 'SarasaGothic.7z'
  local fonts
  mapfile -t fonts < <(ls -d "$pkgname"/*)
  _pass_build "${fonts[@]}"
  _package
}
